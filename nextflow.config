/*
 * -------------------------------------------------
 *  nf-core/methylseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */


// Configurable variables/defaults
params {
    // defaults. best not changed
    version = '1.0-dev' // Pipeline version
    container = "nfcore/vipr:${version}" // for GIS translated into conda env name!
    nf_required_version = '0.30.2' // Minimum version of nextflow required
    outdir = 'results'
    
    // Pipeline options
    skip_kraken = false
}


profiles {
    standard {
        includeConfig 'conf/base.config'
    }
    awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
    }
    gis {
        includeConfig 'conf/base.config'
        includeConfig 'conf/gis.config'
    }

    conda { process.conda = "$baseDir/environment.yml" }
    docker { docker.enabled = true }
    singularity { singularity.enabled = true }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-vipr_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-vipr_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-vipr_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-vipr_DAG.svg"
}

manifest {
  homePage = 'https://github.com/nf-core/vipr'
  description = 'Nextflow , Viral amplicon/enrichment analysis and intrahost variant calling pipeline, part of the nf-core community.'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
